<?php

/**
 * @file
 * Provides BETA to BETA upgrade support.
 */

/**
 * Gets the core beta version.
 */
function beta2beta_get_beta_version() {
  $version = \Drupal::config('beta2beta.settings')->get('version');

  if (!$version) {
    $version = beta2beta_determine_beta_version();
  }
  return $version;
}

/**
 * Determines the core beta version.
 *
 * @return int|false
 *   Returns an integer representing the current Drupal core beta version. If
 *   Drupal core is not on an beta version, return FALSE.
 */
function beta2beta_determine_beta_version() {
  if (strpos(\Drupal::VERSION, '8.0.0-beta') === 0) {
    return str_replace('8.0.0-beta', '', \Drupal::VERSION);
  }
  elseif ($version = \Drupal::state()->get('beta2beta_testing_version', FALSE)) {
    // This is used for automated testing of the module, to allow the tests to
    // be run from the latest HEAD of core.
    return $version;
  }
  else {
    return FALSE;
  }
}

/**
 * Sets the internal schema version based on the specified core beta version.
 *
 * This allows the update.php page to run beta2beta's updates for earlier
 * versions of Drupal core.
 *
 * @param int $version
 *   Integer specifying the core beta version.
 *
 * @return bool
 *   Returns TRUE if the schema was updated to an older beta version. Note that
 *   FALSE does not indicate an error, just that an update wasn't needed or is
 *   not yet supported.
 */
function beta2beta_set_beta_version($version) {
  // For known older beta versions of core, we can forcibly set this module's
  // schema version to an earlier state in order to run later updates.
  if ($version >= 9) {
    drupal_set_installed_schema_version('beta2beta', '8' . $version . '99');
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_info_alter().
 */
function beta2beta_field_info_alter(&$info) {
  // The 'taxonomy_term_reference' has been removed in 8.0.0-beta10.
  $info['taxonomy_term_reference']['id'] = 'taxonomy_term_reference';
  $info['taxonomy_term_reference']['label'] = t('Term reference');
  $info['taxonomy_term_reference']['description'] = t('This field type has been removed.');
  $info['taxonomy_term_reference']['class'] = '\Drupal\beta2beta\PluginOverride\Field\FieldType\TaxonomyTermReferenceItem';
  $info['taxonomy_term_reference']['list_class'] = '\Drupal\Core\Field\EntityReferenceFieldItemList';
  $info['taxonomy_term_reference']['no_ui'] = TRUE;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function beta2beta_field_formatter_info_alter(array &$info) {
  // The 'taxonomy_term_reference_plain', 'taxonomy_term_reference_link' and
  // 'taxonomy_term_reference_rss_category' formatters have been removed in
  // 8.0.0-beta10.
  $info['taxonomy_term_reference_plain'] = [
    'id' => 'taxonomy_term_reference_plain',
    'label' => 'Removed formatter',
    'class' => '\Drupal\beta2beta\PluginOverride\Field\FieldFormatter\TaxonomyFormatter',
    'field_types' => ['taxonomy_term_reference'],
  ];
  $info['taxonomy_term_reference_link'] = [
    'id' => 'taxonomy_term_reference_link',
    'label' => 'Removed formatter',
    'class' => '\Drupal\beta2beta\PluginOverride\Field\FieldFormatter\TaxonomyFormatter',
    'field_types' => ['taxonomy_term_reference'],
  ];
  $info['taxonomy_term_reference_rss_category'] = [
    'id' => 'taxonomy_term_reference_rss_category',
    'label' => 'Removed formatter',
    'class' => '\Drupal\beta2beta\PluginOverride\Field\FieldFormatter\TaxonomyFormatter',
    'field_types' => ['taxonomy_term_reference'],
  ];
}

/**
 * Implements hook_field_widget_info_alter().
 */
function beta2beta_field_widget_info_alter(array &$info) {
  // The 'taxonomy_autocomplete' widget has been removed in 8.0.0-beta10.
  $info['taxonomy_autocomplete'] = [
    'id' => 'taxonomy_autocomplete',
    'label' => 'Removed widget',
    'class' => '\Drupal\beta2beta\PluginOverride\Field\FieldWidget\TaxonomyWidget',
    'field_types' => ['taxonomy_term_reference'],
  ];
}
