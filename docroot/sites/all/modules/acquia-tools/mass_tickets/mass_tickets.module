<?php
/**
 * @file mass_tickets.module
 *   Implements hooks and callbacks for the mass tickets module.
 */

/**
 * Implements hook_menu()
 */
function mass_tickets_menu() {
  return array(
    'mass-tickets' => array(
      'title' => 'Mass Create Parature Tickets',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mass_tickets_form'),
      'access callback' => TRUE,
    ),
    'mass-tickets/subscriptions' => array(
      'title' => 'Find Parature Subscriptions',
      'page callback' => 'mass_tickets_find_subscriptions',
      'page arguments' => array(),
      'access callback' => TRUE,
    ),
    'mass-tickets/subscriptions/%' => array(
      'title' => 'Find Parature Subscriptions',
      'page callback' => 'mass_tickets_find_subscriptions',
      'page arguments' => array(2),
      'access callback' => TRUE,
    ),
  );
}

function mass_tickets_form($form, &$form_state) {
  $form['#prefix'] = 'Ticket type: Remote Admin<br>Category: Security Updates<br>Proactive: Yes<br>';
  
  $form['summary'] = array(
    '#title' => t('Ticket Summary'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  
  $form['details'] = array(
    '#title' => t('Ticket Details'),
    '#type' =>  'textarea',
    '#required' => TRUE,
  );
  
  $form['contacts'] = array(
    '#title' => t(''),
    '#type' => 'fieldset',
    '#prefix' => '<div id="contacts">',
    '#suffix' => '</div>',
  );
  
  if (empty($form_state['n_contacts'])) $form_state['n_contacts'] = 1;
  
  if (!empty($form_state['input']['_triggering_element_name']) && $form_state['input']['_triggering_element_name'] == 'add_contact')
    $form_state['n_contacts']++;
  
  for ($i = 0; $i < $form_state['n_contacts']; $i++)
    _mass_tickets_contact_form($form, $form_state, $i);
  
  $form['contacts']['add_contact'] = array(
    '#type' => 'button',
    '#value' => '+ Add Ticket',
    '#executes_submit_callback' => FALSE,
    '#limit_validation_errors' => array(),
    '#name' => 'add_contact',
    '#ajax' => array(
      'callback' => '_mass_tickets_add_contact',
      'wrapper' => 'contacts',
      'method' => 'replace',
      'effect' => 'none'
    ),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Create Parature tickets',
  );
  
  
  return $form;
}

function mass_tickets_form_submit($form, $form_state) {
  libraries_load('parature_api');
  $p = new ParatureAPI();  
  $tickets_created = 0;
  
  for ($i = 0; $i < $form_state['n_contacts']; $i++) {
    try {
      $customer_id = get_customer_id_from_email($form_state['values']['contact-' . $i]);
      $ticket = $p->get_object('Ticket');
      
      // Summary and Details
      $ticket->addChild('Custom_Field', $form_state['values']['summary'])->addAttribute('id', '36');
      $ticket->addChild('Custom_Field', $form_state['values']['details'])->addAttribute('id', '37');
      // Ticket Type = Remote Admin
      $ticket_type = $ticket->addChild('Custom_Field');
      $ticket_type->addAttribute('id', '92');
      $option = $ticket_type->addChild('Option');
      $option->addAttribute('id', '55');
      $option->addAttribute('selected', 'true');
      // Category = Perform Security Updates
      $category = $ticket->addChild('Custom_Field');
      $category->addAttribute('id', '93');
      $option = $category->addChild('Option');
      $option->addAttribute('id', '370');
      $option->addAttribute('selected', 'true');
      // Subcategory = Both Core and Contrib Modules
      $category = $ticket->addChild('Custom_Field');
      $category->addAttribute('id', '165');
      $option = $category->addChild('Option');
      $option->addAttribute('id', '383');
      $option->addAttribute('selected', 'true');
      // Proactive = true
      $ticket->addChild('Custom_Field', 'true')->addAttribute('id', '107');
      // Ticket Customer
      $ticket->addChild('Ticket_Customer')->addChild('Customer')->addAttribute('id', $customer_id);
      // CC list
      $ticket->addChild('Cc_Customer', $form_state['values']['cc_list-' . $i]);
      // Email notification
      $ticket->addChild('Email_Notification', 'true');
      // Subscription
      if (!empty($form_state['values']['subscription_id-' . $i])) {
        $subscription = $p->get_object('Asset', $form_state['values']['subscription_id-' . $i]);
        $ticket->addChild('Ticket_Asset')->addChild('Asset')->addAttribute('id', $form_state['values']['subscription_id-' . $i]);
        
        $ticket->addChild('Custom_Field', (string)$subscription->Name)->addAttribute('id', 113);
        try {
          $ticket->addChild('Custom_Field', $subscription->get_field('Subscription URL'))->addAttribute('id', 114);
        }
        catch (Exception $e) {}
      }

      $response = new SimpleXMLElement($p->save_new($ticket));
      if ($response->getName() != 'Ticket') {
        throw new Exception($response->attributes()->message);
      }
      else {
        $tickets_created++;
      }
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage() . '; ticket not created for ' . $form_state['values']['contact-' . $i] , 'warning');
    }
  }
  drupal_set_message(t('@n tickets created.', array('@n' => $tickets_created)));
}

function get_customer_id_from_email($email) {
  libraries_load('parature_api');
  $p = new ParatureAPI();
  try {
    $customer = $p->get_object('Customer', array('Email' => $email));
  }
  catch (Exception $e) {
    throw new Exception('No Parature contact found with the email "' . $email . '"');
  }
  
  return $customer->get_id();
}


function _mass_tickets_add_contact($form, &$form_state) {
  return $form['contacts'];
}

function _mass_tickets_contact_form(&$form, $form_state, $i) {
  $form['contacts']['group-' . $i] = array(
    '#type' => 'fieldset',
    '#title' => 'Ticket',
    '#collapsible' => TRUE,
  );
  $form['contacts']['group-' . $i]['contact-' . $i] = array(
    '#title' => 'Primary contact email',
    '#type' => 'textfield',
    '#required' => TRUE,
  );
  $form['contacts']['group-' . $i]['cc_list-' . $i] = array(
    '#title' => 'Contact CC list',
    '#type' => 'textarea',
    '#rows' => 2,
  );
  $form['contacts']['group-' . $i]['subscription_id-' . $i] = array(
    '#type' => 'textfield',
    '#title' => 'Subscription ID',
    '#description' => t('To specify a subscription with this ticket, include a subscription ID from the !sub_search_page.',
      array('!sub_search_page' => l('subscription search page', 'mass-tickets/subscriptions', array('attributes' => array('target' => '_new'))))),
    '#size' => 4,
  );
}

/**
 * Find subscriptions page
 */
function mass_tickets_find_subscriptions($query = NULL) {
  $output = drupal_render(drupal_get_form('mass_tickets_find_subscriptions_form'));
  
  if (!empty($query)) {
    libraries_load('parature_api');
    $p = new ParatureAPI();

    $results = new SimpleXMLElement($p->request('Asset', array('Name_like_' => $query, '_fields_' => 105, '_pageSize_' => 500)));
    $subscriptions = $results->xpath('Asset');

    $table = array(
      'header' => array(array('data' => 'ID', 'style' => 'text-align:center;'), 'Name', 'Owner', 'Created'),
      'caption' => 'Results',
      'colgroups' => array(),
      'sticky' => TRUE,
      'empty' => t('No results'),
      'attributes' => array(),
      'rows' => array(),
    );

    foreach($subscriptions as $subscription) {
      $url = (string)current($subscription->xpath('Custom_Field[@id=105]'));
      
      $table['rows'][] = array(
        array(
          'data' => (string)$subscription->attributes()->id,
          'style' => 'font-size:20px;text-align:center;',
        ),
        empty($url) ? (string)$subscription->Name : l((string)$subscription->Name, $url, array('attributes' => array('target' => '_new'))),
        (string)$subscription->Account_Owner->Account->Account_Name,
        format_date(strtotime((string)$subscription->Date_Created), 'short'),
      );
    }

    $output .= theme_table($table);
  }
  
  return $output;
}

/**
 * Form for finding subscriptions by name.
 */
function mass_tickets_find_subscriptions_form($form, $form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Subscription name',
    '#description' => 'Enter all or part of a subscription name to search for matches.',
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search subscriptions',
  );
  
  return $form;
}

function mass_tickets_find_subscriptions_form_submit($form, $form_state) {
  drupal_goto('mass-tickets/subscriptions/' . $form_state['values']['name']);
}

/**
 * Search subscriptions by name.
 *
 * @param string $query
 *   All or part of a subscription name.
 * @return array
 *   An array where the keys are the Parature subscription IDs and the values
 *   are the names.
 */
function _mass_tickets_get_subscriptions($query) {
  return empty($query) ? array() : array('1' => 'a subscription', '2' => 'another sub');
}


